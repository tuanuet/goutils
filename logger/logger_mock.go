// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package logger

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg
func (_m *MockLogger) Debug(msg string) {
	_m.Called(msg)
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg
func (_m *MockLogger) Error(msg string) {
	_m.Called(msg)
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: msg
func (_m *MockLogger) Fatal(msg string) {
	_m.Called(msg)
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetDelegate provides a mock function with given fields:
func (_m *MockLogger) GetDelegate() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg
func (_m *MockLogger) Info(msg string) {
	_m.Called(msg)
}

// Infof provides a mock function with given fields: format, args
func (_m *MockLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: msg
func (_m *MockLogger) Panic(msg string) {
	_m.Called(msg)
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: msg
func (_m *MockLogger) Warn(msg string) {
	_m.Called(msg)
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WithFields provides a mock function with given fields: keyValues
func (_m *MockLogger) WithFields(keyValues Fields) Logger {
	ret := _m.Called(keyValues)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(Fields) Logger); ok {
		r0 = rf(keyValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}
